----------------------------------------------------------------------
-- CREACIÓN DE LA BASE DE DATOS Y SELECCIÓN DE LA MISMA
----------------------------------------------------------------------
CREATE DATABASE IF NOT EXISTS gestion_inventario;
USE gestion_inventario;

----------------------------------------------------------------------
-- CREACIÓN DE TABLAS PRINCIPALES
----------------------------------------------------------------------

-- Tabla de Productos:
CREATE TABLE IF NOT EXISTS productos (
    id_producto INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL,
    marca VARCHAR(100) NOT NULL DEFAULT 'No informado',
    stock INT NOT NULL,
    precio DECIMAL(10,2) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Tabla de Ventas:
CREATE TABLE IF NOT EXISTS ventas (
    id_venta INT AUTO_INCREMENT PRIMARY KEY,
    fecha DATE NOT NULL DEFAULT (CURRENT_DATE),
    total DECIMAL(10,2) NOT NULL,
    INDEX (fecha)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Tabla de Detalle de Ventas:
CREATE TABLE IF NOT EXISTS detalle_venta (
    id_detalle INT AUTO_INCREMENT PRIMARY KEY,
    id_venta INT NOT NULL,
    id_producto INT NOT NULL,
    cantidad INT NOT NULL,
    subtotal DECIMAL(10,2),
    FOREIGN KEY (id_venta) REFERENCES ventas(id_venta)
        ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_producto) REFERENCES productos(id_producto)
        ON DELETE RESTRICT ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

----------------------------------------------------------------------
-- CREACIÓN DE LA TABLA DE AUDITORÍA
----------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS auditoria (
    id_auditoria INT AUTO_INCREMENT PRIMARY KEY,
    tabla VARCHAR(100) NOT NULL,
    accion VARCHAR(50) NOT NULL,
    descripcion TEXT,
    fecha DATETIME DEFAULT CURRENT_TIMESTAMP,
    usuario VARCHAR(100)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

----------------------------------------------------------------------
-- TRIGGERS PARA ACTUALIZAR EL TOTAL DE LA VENTA
----------------------------------------------------------------------
DELIMITER //
CREATE TRIGGER trg_actualizar_total_venta_despues_insercion
AFTER INSERT ON detalle_venta
FOR EACH ROW
BEGIN
  UPDATE ventas
  SET total = (
    SELECT IFNULL(SUM(subtotal), 0)
    FROM detalle_venta
    WHERE id_venta = NEW.id_venta
  )
  WHERE id_venta = NEW.id_venta;
END;
//
DELIMITER ;

DELIMITER //
CREATE TRIGGER trg_actualizar_total_venta_despues_actualizacion
AFTER UPDATE ON detalle_venta
FOR EACH ROW
BEGIN
  UPDATE ventas
  SET total = (
    SELECT IFNULL(SUM(subtotal), 0)
    FROM detalle_venta
    WHERE id_venta = NEW.id_venta
  )
  WHERE id_venta = NEW.id_venta;
END;
//
DELIMITER ;

DELIMITER //
CREATE TRIGGER trg_actualizar_total_venta_despues_eliminacion
AFTER DELETE ON detalle_venta
FOR EACH ROW
BEGIN
  UPDATE ventas
  SET total = (
    SELECT IFNULL(SUM(subtotal), 0)
    FROM detalle_venta
    WHERE id_venta = OLD.id_venta
  )
  WHERE id_venta = OLD.id_venta;
END;
//
DELIMITER ;

----------------------------------------------------------------------
-- TRIGGERS PARA VALIDAR STOCK Y CALCULAR SUBTOTAL
----------------------------------------------------------------------
DELIMITER //
CREATE TRIGGER trg_validar_y_calcular_subtotal_antes_insercion
BEFORE INSERT ON detalle_venta
FOR EACH ROW
BEGIN
    DECLARE v_stock INT;
    DECLARE v_precio DECIMAL(10,2);

    -- Obtener stock y precio actual del producto
    SELECT stock, precio INTO v_stock, v_precio
    FROM productos
    WHERE id_producto = NEW.id_producto;

    IF v_stock IS NULL THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Producto no existe';
    END IF;
    IF NEW.cantidad > v_stock THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Stock insuficiente';
    END IF;

    SET NEW.subtotal = NEW.cantidad * v_precio;
END;
//
DELIMITER //

CREATE TRIGGER trg_validar_y_calcular_subtotal_antes_actualizacion
BEFORE UPDATE ON detalle_venta
FOR EACH ROW
BEGIN
    DECLARE v_stock INT;
    DECLARE v_precio DECIMAL(10,2);

    SELECT stock, precio INTO v_stock, v_precio
    FROM productos
    WHERE id_producto = NEW.id_producto;

    IF v_stock IS NULL THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Producto no existe';
    END IF;
    IF NEW.cantidad > v_stock THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Stock insuficiente';
    END IF;

    SET NEW.subtotal = NEW.cantidad * v_precio;
END;
//
DELIMITER ;

----------------------------------------------------------------------
-- TRIGGERS DE AUDITORÍA PARA TABLA PRODUCTOS
----------------------------------------------------------------------
DELIMITER //
CREATE TRIGGER trg_auditoria_productos_insert
AFTER INSERT ON productos
FOR EACH ROW
BEGIN
  INSERT INTO auditoria (tabla, accion, descripcion, usuario)
  VALUES ('productos', 'INSERT', CONCAT('Se insertó un producto con ID: ', NEW.id_producto, ', Nombre: ', NEW.nombre), CURRENT_USER());
END;
//
DELIMITER //

DELIMITER //
CREATE TRIGGER trg_auditoria_productos_update
AFTER UPDATE ON productos
FOR EACH ROW
BEGIN
  INSERT INTO auditoria (tabla, accion, descripcion, usuario)
  VALUES ('productos', 'UPDATE', CONCAT('Se actualizó el producto con ID: ', NEW.id_producto, '. Valores antiguos: Nombre=', OLD.nombre, ', Stock=', OLD.stock, '. Valores nuevos: Nombre=', NEW.nombre, ', Stock=', NEW.stock), CURRENT_USER());
END;
//
DELIMITER //

DELIMITER //
CREATE TRIGGER trg_auditoria_productos_delete
AFTER DELETE ON productos
FOR EACH ROW
BEGIN
  INSERT INTO auditoria (tabla, accion, descripcion, usuario)
  VALUES ('productos', 'DELETE', CONCAT('Se eliminó el producto con ID: ', OLD.id_producto, ', Nombre: ', OLD.nombre), CURRENT_USER());
END;
//
DELIMITER ;

----------------------------------------------------------------------
-- TRIGGERS DE AUDITORÍA PARA TABLA VENTAS
----------------------------------------------------------------------
DELIMITER //
CREATE TRIGGER trg_auditoria_ventas_insert
AFTER INSERT ON ventas
FOR EACH ROW
BEGIN
  INSERT INTO auditoria (tabla, accion, descripcion, usuario)
  VALUES ('ventas', 'INSERT', CONCAT('Se insertó una venta con ID: ', NEW.id_venta, ', Fecha: ', NEW.fecha), CURRENT_USER());
END;
//
DELIMITER //

DELIMITER //
CREATE TRIGGER trg_auditoria_ventas_update
AFTER UPDATE ON ventas
FOR EACH ROW
BEGIN
  INSERT INTO auditoria (tabla, accion, descripcion, usuario)
  VALUES ('ventas', 'UPDATE', CONCAT('Se actualizó la venta con ID: ', NEW.id_venta, '. Valores antiguos: Total=', OLD.total, '. Valores nuevos: Total=', NEW.total), CURRENT_USER());
END;
//
DELIMITER //

DELIMITER //
CREATE TRIGGER trg_auditoria_ventas_delete
AFTER DELETE ON ventas
FOR EACH ROW
BEGIN
  INSERT INTO auditoria (tabla, accion, descripcion, usuario)
  VALUES ('ventas', 'DELETE', CONCAT('Se eliminó la venta con ID: ', OLD.id_venta), CURRENT_USER());
END;
//
DELIMITER ;

----------------------------------------------------------------------
-- TRIGGERS DE AUDITORÍA PARA TABLA DETALLE_VENTA
----------------------------------------------------------------------
DELIMITER //
CREATE TRIGGER trg_auditoria_detalle_venta_insert
AFTER INSERT ON detalle_venta
FOR EACH ROW
BEGIN
  INSERT INTO auditoria (tabla, accion, descripcion, usuario)
  VALUES ('detalle_venta', 'INSERT', CONCAT('Se insertó un detalle de venta con ID: ', NEW.id_detalle, ', Venta ID: ', NEW.id_venta, ', Producto ID: ', NEW.id_producto, ', Cantidad: ', NEW.cantidad, ', Subtotal: ', NEW.subtotal), CURRENT_USER());
END;
//
DELIMITER //

DELIMITER //
CREATE TRIGGER trg_auditoria_detalle_venta_update
AFTER UPDATE ON detalle_venta
FOR EACH ROW
BEGIN
  INSERT INTO auditoria (tabla, accion, descripcion, usuario)
  VALUES ('detalle_venta', 'UPDATE', CONCAT('Se actualizó el detalle de venta con ID: ', NEW.id_detalle, '. Valores antiguos: Cantidad=', OLD.cantidad, ', Subtotal=', OLD.subtotal, '. Valores nuevos: Cantidad=', NEW.cantidad, ', Subtotal=', NEW.subtotal), CURRENT_USER());
END;
//
DELIMITER //

DELIMITER //
CREATE TRIGGER trg_auditoria_detalle_venta_delete
AFTER DELETE ON detalle_venta
FOR EACH ROW
BEGIN
  INSERT INTO auditoria (tabla, accion, descripcion, usuario)
  VALUES ('detalle_venta', 'DELETE', CONCAT('Se eliminó el detalle de venta con ID: ', OLD.id_detalle, ', Venta ID: ', OLD.id_venta, ', Producto ID: ', OLD.id_producto), CURRENT_USER());
END;
//
DELIMITER ;
